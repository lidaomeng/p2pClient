/* soapServer.cpp
   Generated by gSOAP 2.8.14 from fctxt.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.14 2016-03-29 04:15:25 GMT")


extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if (soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:getTaskProcessReport"))
		return soap_serve___ns1__getTaskProcessReport(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:getPackList"))
		return soap_serve___ns1__getPackList(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:sendTaskProcess"))
		return soap_serve___ns1__sendTaskProcess(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:getDcp"))
		return soap_serve___ns1__getDcp(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:getExceptionReport"))
		return soap_serve___ns1__getExceptionReport(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getTaskProcessReport(struct soap *soap)
{	struct __ns1__getTaskProcessReport soap_tmp___ns1__getTaskProcessReport;
	ns1__getTaskProcessReportResponse ns1__getTaskProcessReportResponse_;
	ns1__getTaskProcessReportResponse_.soap_default(soap);
	soap_default___ns1__getTaskProcessReport(soap, &soap_tmp___ns1__getTaskProcessReport);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__getTaskProcessReport(soap, &soap_tmp___ns1__getTaskProcessReport, "-ns1:getTaskProcessReport", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__getTaskProcessReport(soap, soap_tmp___ns1__getTaskProcessReport.ns1__getTaskProcessReport_, &ns1__getTaskProcessReportResponse_);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__getTaskProcessReportResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__getTaskProcessReportResponse_.soap_put(soap, "ns1:getTaskProcessReportResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__getTaskProcessReportResponse_.soap_put(soap, "ns1:getTaskProcessReportResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getPackList(struct soap *soap)
{	struct __ns1__getPackList soap_tmp___ns1__getPackList;
	ns1__getPackListResponse ns1__getPackListResponse_;
	ns1__getPackListResponse_.soap_default(soap);
	soap_default___ns1__getPackList(soap, &soap_tmp___ns1__getPackList);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__getPackList(soap, &soap_tmp___ns1__getPackList, "-ns1:getPackList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__getPackList(soap, soap_tmp___ns1__getPackList.ns1__getPackList_, &ns1__getPackListResponse_);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__getPackListResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__getPackListResponse_.soap_put(soap, "ns1:getPackListResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__getPackListResponse_.soap_put(soap, "ns1:getPackListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__sendTaskProcess(struct soap *soap)
{	struct __ns1__sendTaskProcess soap_tmp___ns1__sendTaskProcess;
	ns1__sendTaskProcessResponse ns1__sendTaskProcessResponse_;
	ns1__sendTaskProcessResponse_.soap_default(soap);
	soap_default___ns1__sendTaskProcess(soap, &soap_tmp___ns1__sendTaskProcess);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__sendTaskProcess(soap, &soap_tmp___ns1__sendTaskProcess, "-ns1:sendTaskProcess", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__sendTaskProcess(soap, soap_tmp___ns1__sendTaskProcess.ns1__sendTaskProcess_, &ns1__sendTaskProcessResponse_);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__sendTaskProcessResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__sendTaskProcessResponse_.soap_put(soap, "ns1:sendTaskProcessResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__sendTaskProcessResponse_.soap_put(soap, "ns1:sendTaskProcessResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getDcp(struct soap *soap)
{	struct __ns1__getDcp soap_tmp___ns1__getDcp;
	ns1__getDcpResponse ns1__getDcpResponse_;
	ns1__getDcpResponse_.soap_default(soap);
	soap_default___ns1__getDcp(soap, &soap_tmp___ns1__getDcp);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__getDcp(soap, &soap_tmp___ns1__getDcp, "-ns1:getDcp", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__getDcp(soap, soap_tmp___ns1__getDcp.ns1__getDcp_, &ns1__getDcpResponse_);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__getDcpResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__getDcpResponse_.soap_put(soap, "ns1:getDcpResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__getDcpResponse_.soap_put(soap, "ns1:getDcpResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getExceptionReport(struct soap *soap)
{	struct __ns1__getExceptionReport soap_tmp___ns1__getExceptionReport;
	ns1__getExceptionReportResponse ns1__getExceptionReportResponse_;
	ns1__getExceptionReportResponse_.soap_default(soap);
	soap_default___ns1__getExceptionReport(soap, &soap_tmp___ns1__getExceptionReport);
	soap->encodingStyle = NULL;
	if (!soap_get___ns1__getExceptionReport(soap, &soap_tmp___ns1__getExceptionReport, "-ns1:getExceptionReport", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __ns1__getExceptionReport(soap, soap_tmp___ns1__getExceptionReport.ns1__getExceptionReport_, &ns1__getExceptionReportResponse_);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__getExceptionReportResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__getExceptionReportResponse_.soap_put(soap, "ns1:getExceptionReportResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__getExceptionReportResponse_.soap_put(soap, "ns1:getExceptionReportResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
