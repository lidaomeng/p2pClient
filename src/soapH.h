/* soapH.h
   Generated by gSOAP 2.8.14 from fctxt.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_begin(soap), soap_serialize_byte(soap, data), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_begin(soap), soap_serialize_int(soap, data), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_begin(soap), soap_serialize_LONG64(soap, data), soap_begin_send(soap) || soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_begin(soap), soap_serialize_float(soap, data), soap_begin_send(soap) || soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( soap_begin_recv(soap) || !soap_get_float(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_begin(soap), soap_serialize_std__string(soap, data), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getExceptionReportResponse
#define SOAP_TYPE_ns1__getExceptionReportResponse (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getExceptionReportResponse(struct soap*, const char*, int, const ns1__getExceptionReportResponse *, const char*);
SOAP_FMAC3 ns1__getExceptionReportResponse * SOAP_FMAC4 soap_in_ns1__getExceptionReportResponse(struct soap*, const char*, ns1__getExceptionReportResponse *, const char*);

#ifndef soap_write_ns1__getExceptionReportResponse
#define soap_write_ns1__getExceptionReportResponse(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getExceptionReportResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getExceptionReportResponse * SOAP_FMAC4 soap_get_ns1__getExceptionReportResponse(struct soap*, ns1__getExceptionReportResponse *, const char*, const char*);

#ifndef soap_read_ns1__getExceptionReportResponse
#define soap_read_ns1__getExceptionReportResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getExceptionReportResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__getExceptionReportResponse * SOAP_FMAC2 soap_instantiate_ns1__getExceptionReportResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getExceptionReportResponse * soap_new_ns1__getExceptionReportResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getExceptionReportResponse(soap, n, NULL, NULL, NULL); }

inline ns1__getExceptionReportResponse * soap_new_req_ns1__getExceptionReportResponse(struct soap *soap) { ns1__getExceptionReportResponse *_p = soap_instantiate_ns1__getExceptionReportResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__getExceptionReportResponse * soap_new_set_ns1__getExceptionReportResponse(struct soap *soap, std::string *return_) { ns1__getExceptionReportResponse *_p = soap_instantiate_ns1__getExceptionReportResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getExceptionReportResponse::return_ = return_; } return _p; }

inline void soap_delete_ns1__getExceptionReportResponse(struct soap *soap, ns1__getExceptionReportResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getExceptionReportResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getExceptionReport
#define SOAP_TYPE_ns1__getExceptionReport (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getExceptionReport(struct soap*, const char*, int, const ns1__getExceptionReport *, const char*);
SOAP_FMAC3 ns1__getExceptionReport * SOAP_FMAC4 soap_in_ns1__getExceptionReport(struct soap*, const char*, ns1__getExceptionReport *, const char*);

#ifndef soap_write_ns1__getExceptionReport
#define soap_write_ns1__getExceptionReport(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getExceptionReport", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getExceptionReport * SOAP_FMAC4 soap_get_ns1__getExceptionReport(struct soap*, ns1__getExceptionReport *, const char*, const char*);

#ifndef soap_read_ns1__getExceptionReport
#define soap_read_ns1__getExceptionReport(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getExceptionReport(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__getExceptionReport * SOAP_FMAC2 soap_instantiate_ns1__getExceptionReport(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getExceptionReport * soap_new_ns1__getExceptionReport(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getExceptionReport(soap, n, NULL, NULL, NULL); }

inline ns1__getExceptionReport * soap_new_req_ns1__getExceptionReport(struct soap *soap) { ns1__getExceptionReport *_p = soap_instantiate_ns1__getExceptionReport(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__getExceptionReport * soap_new_set_ns1__getExceptionReport(struct soap *soap, ns1__TaskExceptionReport *arg0) { ns1__getExceptionReport *_p = soap_instantiate_ns1__getExceptionReport(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getExceptionReport::arg0 = arg0; } return _p; }

inline void soap_delete_ns1__getExceptionReport(struct soap *soap, ns1__getExceptionReport *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getExceptionReport(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDcpResponse
#define SOAP_TYPE_ns1__getDcpResponse (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDcpResponse(struct soap*, const char*, int, const ns1__getDcpResponse *, const char*);
SOAP_FMAC3 ns1__getDcpResponse * SOAP_FMAC4 soap_in_ns1__getDcpResponse(struct soap*, const char*, ns1__getDcpResponse *, const char*);

#ifndef soap_write_ns1__getDcpResponse
#define soap_write_ns1__getDcpResponse(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getDcpResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getDcpResponse * SOAP_FMAC4 soap_get_ns1__getDcpResponse(struct soap*, ns1__getDcpResponse *, const char*, const char*);

#ifndef soap_read_ns1__getDcpResponse
#define soap_read_ns1__getDcpResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDcpResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__getDcpResponse * SOAP_FMAC2 soap_instantiate_ns1__getDcpResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getDcpResponse * soap_new_ns1__getDcpResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDcpResponse(soap, n, NULL, NULL, NULL); }

inline ns1__getDcpResponse * soap_new_req_ns1__getDcpResponse(struct soap *soap) { ns1__getDcpResponse *_p = soap_instantiate_ns1__getDcpResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__getDcpResponse * soap_new_set_ns1__getDcpResponse(struct soap *soap, ns1__dcpBean *return_) { ns1__getDcpResponse *_p = soap_instantiate_ns1__getDcpResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getDcpResponse::return_ = return_; } return _p; }

inline void soap_delete_ns1__getDcpResponse(struct soap *soap, ns1__getDcpResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDcpResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDcp
#define SOAP_TYPE_ns1__getDcp (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDcp(struct soap*, const char*, int, const ns1__getDcp *, const char*);
SOAP_FMAC3 ns1__getDcp * SOAP_FMAC4 soap_in_ns1__getDcp(struct soap*, const char*, ns1__getDcp *, const char*);

#ifndef soap_write_ns1__getDcp
#define soap_write_ns1__getDcp(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getDcp", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getDcp * SOAP_FMAC4 soap_get_ns1__getDcp(struct soap*, ns1__getDcp *, const char*, const char*);

#ifndef soap_read_ns1__getDcp
#define soap_read_ns1__getDcp(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDcp(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__getDcp * SOAP_FMAC2 soap_instantiate_ns1__getDcp(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getDcp * soap_new_ns1__getDcp(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDcp(soap, n, NULL, NULL, NULL); }

inline ns1__getDcp * soap_new_req_ns1__getDcp(struct soap *soap) { ns1__getDcp *_p = soap_instantiate_ns1__getDcp(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__getDcp * soap_new_set_ns1__getDcp(struct soap *soap) { ns1__getDcp *_p = soap_instantiate_ns1__getDcp(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns1__getDcp(struct soap *soap, ns1__getDcp *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDcp(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getPackListResponse
#define SOAP_TYPE_ns1__getPackListResponse (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPackListResponse(struct soap*, const char*, int, const ns1__getPackListResponse *, const char*);
SOAP_FMAC3 ns1__getPackListResponse * SOAP_FMAC4 soap_in_ns1__getPackListResponse(struct soap*, const char*, ns1__getPackListResponse *, const char*);

#ifndef soap_write_ns1__getPackListResponse
#define soap_write_ns1__getPackListResponse(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getPackListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getPackListResponse * SOAP_FMAC4 soap_get_ns1__getPackListResponse(struct soap*, ns1__getPackListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getPackListResponse
#define soap_read_ns1__getPackListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getPackListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__getPackListResponse * SOAP_FMAC2 soap_instantiate_ns1__getPackListResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getPackListResponse * soap_new_ns1__getPackListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getPackListResponse(soap, n, NULL, NULL, NULL); }

inline ns1__getPackListResponse * soap_new_req_ns1__getPackListResponse(struct soap *soap) { ns1__getPackListResponse *_p = soap_instantiate_ns1__getPackListResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__getPackListResponse * soap_new_set_ns1__getPackListResponse(struct soap *soap, std::string *return_) { ns1__getPackListResponse *_p = soap_instantiate_ns1__getPackListResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getPackListResponse::return_ = return_; } return _p; }

inline void soap_delete_ns1__getPackListResponse(struct soap *soap, ns1__getPackListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getPackListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getPackList
#define SOAP_TYPE_ns1__getPackList (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPackList(struct soap*, const char*, int, const ns1__getPackList *, const char*);
SOAP_FMAC3 ns1__getPackList * SOAP_FMAC4 soap_in_ns1__getPackList(struct soap*, const char*, ns1__getPackList *, const char*);

#ifndef soap_write_ns1__getPackList
#define soap_write_ns1__getPackList(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getPackList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getPackList * SOAP_FMAC4 soap_get_ns1__getPackList(struct soap*, ns1__getPackList *, const char*, const char*);

#ifndef soap_read_ns1__getPackList
#define soap_read_ns1__getPackList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getPackList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__getPackList * SOAP_FMAC2 soap_instantiate_ns1__getPackList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getPackList * soap_new_ns1__getPackList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getPackList(soap, n, NULL, NULL, NULL); }

inline ns1__getPackList * soap_new_req_ns1__getPackList(struct soap *soap) { ns1__getPackList *_p = soap_instantiate_ns1__getPackList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__getPackList * soap_new_set_ns1__getPackList(struct soap *soap) { ns1__getPackList *_p = soap_instantiate_ns1__getPackList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns1__getPackList(struct soap *soap, ns1__getPackList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getPackList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__sendTaskProcessResponse
#define SOAP_TYPE_ns1__sendTaskProcessResponse (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendTaskProcessResponse(struct soap*, const char*, int, const ns1__sendTaskProcessResponse *, const char*);
SOAP_FMAC3 ns1__sendTaskProcessResponse * SOAP_FMAC4 soap_in_ns1__sendTaskProcessResponse(struct soap*, const char*, ns1__sendTaskProcessResponse *, const char*);

#ifndef soap_write_ns1__sendTaskProcessResponse
#define soap_write_ns1__sendTaskProcessResponse(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:sendTaskProcessResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__sendTaskProcessResponse * SOAP_FMAC4 soap_get_ns1__sendTaskProcessResponse(struct soap*, ns1__sendTaskProcessResponse *, const char*, const char*);

#ifndef soap_read_ns1__sendTaskProcessResponse
#define soap_read_ns1__sendTaskProcessResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__sendTaskProcessResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__sendTaskProcessResponse * SOAP_FMAC2 soap_instantiate_ns1__sendTaskProcessResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__sendTaskProcessResponse * soap_new_ns1__sendTaskProcessResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__sendTaskProcessResponse(soap, n, NULL, NULL, NULL); }

inline ns1__sendTaskProcessResponse * soap_new_req_ns1__sendTaskProcessResponse(struct soap *soap) { ns1__sendTaskProcessResponse *_p = soap_instantiate_ns1__sendTaskProcessResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__sendTaskProcessResponse * soap_new_set_ns1__sendTaskProcessResponse(struct soap *soap, ns1__TaskOper *return_) { ns1__sendTaskProcessResponse *_p = soap_instantiate_ns1__sendTaskProcessResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__sendTaskProcessResponse::return_ = return_; } return _p; }

inline void soap_delete_ns1__sendTaskProcessResponse(struct soap *soap, ns1__sendTaskProcessResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__sendTaskProcessResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__sendTaskProcess
#define SOAP_TYPE_ns1__sendTaskProcess (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendTaskProcess(struct soap*, const char*, int, const ns1__sendTaskProcess *, const char*);
SOAP_FMAC3 ns1__sendTaskProcess * SOAP_FMAC4 soap_in_ns1__sendTaskProcess(struct soap*, const char*, ns1__sendTaskProcess *, const char*);

#ifndef soap_write_ns1__sendTaskProcess
#define soap_write_ns1__sendTaskProcess(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:sendTaskProcess", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__sendTaskProcess * SOAP_FMAC4 soap_get_ns1__sendTaskProcess(struct soap*, ns1__sendTaskProcess *, const char*, const char*);

#ifndef soap_read_ns1__sendTaskProcess
#define soap_read_ns1__sendTaskProcess(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__sendTaskProcess(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__sendTaskProcess * SOAP_FMAC2 soap_instantiate_ns1__sendTaskProcess(struct soap*, int, const char*, const char*, size_t*);

inline ns1__sendTaskProcess * soap_new_ns1__sendTaskProcess(struct soap *soap, int n = -1) { return soap_instantiate_ns1__sendTaskProcess(soap, n, NULL, NULL, NULL); }

inline ns1__sendTaskProcess * soap_new_req_ns1__sendTaskProcess(struct soap *soap) { ns1__sendTaskProcess *_p = soap_instantiate_ns1__sendTaskProcess(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__sendTaskProcess * soap_new_set_ns1__sendTaskProcess(struct soap *soap, ns1__TaskOper *arg0) { ns1__sendTaskProcess *_p = soap_instantiate_ns1__sendTaskProcess(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__sendTaskProcess::arg0 = arg0; } return _p; }

inline void soap_delete_ns1__sendTaskProcess(struct soap *soap, ns1__sendTaskProcess *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__sendTaskProcess(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTaskProcessReportResponse
#define SOAP_TYPE_ns1__getTaskProcessReportResponse (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTaskProcessReportResponse(struct soap*, const char*, int, const ns1__getTaskProcessReportResponse *, const char*);
SOAP_FMAC3 ns1__getTaskProcessReportResponse * SOAP_FMAC4 soap_in_ns1__getTaskProcessReportResponse(struct soap*, const char*, ns1__getTaskProcessReportResponse *, const char*);

#ifndef soap_write_ns1__getTaskProcessReportResponse
#define soap_write_ns1__getTaskProcessReportResponse(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getTaskProcessReportResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getTaskProcessReportResponse * SOAP_FMAC4 soap_get_ns1__getTaskProcessReportResponse(struct soap*, ns1__getTaskProcessReportResponse *, const char*, const char*);

#ifndef soap_read_ns1__getTaskProcessReportResponse
#define soap_read_ns1__getTaskProcessReportResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTaskProcessReportResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__getTaskProcessReportResponse * SOAP_FMAC2 soap_instantiate_ns1__getTaskProcessReportResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getTaskProcessReportResponse * soap_new_ns1__getTaskProcessReportResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTaskProcessReportResponse(soap, n, NULL, NULL, NULL); }

inline ns1__getTaskProcessReportResponse * soap_new_req_ns1__getTaskProcessReportResponse(struct soap *soap) { ns1__getTaskProcessReportResponse *_p = soap_instantiate_ns1__getTaskProcessReportResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__getTaskProcessReportResponse * soap_new_set_ns1__getTaskProcessReportResponse(struct soap *soap, std::string *return_) { ns1__getTaskProcessReportResponse *_p = soap_instantiate_ns1__getTaskProcessReportResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getTaskProcessReportResponse::return_ = return_; } return _p; }

inline void soap_delete_ns1__getTaskProcessReportResponse(struct soap *soap, ns1__getTaskProcessReportResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTaskProcessReportResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTaskProcessReport
#define SOAP_TYPE_ns1__getTaskProcessReport (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTaskProcessReport(struct soap*, const char*, int, const ns1__getTaskProcessReport *, const char*);
SOAP_FMAC3 ns1__getTaskProcessReport * SOAP_FMAC4 soap_in_ns1__getTaskProcessReport(struct soap*, const char*, ns1__getTaskProcessReport *, const char*);

#ifndef soap_write_ns1__getTaskProcessReport
#define soap_write_ns1__getTaskProcessReport(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getTaskProcessReport", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getTaskProcessReport * SOAP_FMAC4 soap_get_ns1__getTaskProcessReport(struct soap*, ns1__getTaskProcessReport *, const char*, const char*);

#ifndef soap_read_ns1__getTaskProcessReport
#define soap_read_ns1__getTaskProcessReport(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTaskProcessReport(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__getTaskProcessReport * SOAP_FMAC2 soap_instantiate_ns1__getTaskProcessReport(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getTaskProcessReport * soap_new_ns1__getTaskProcessReport(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTaskProcessReport(soap, n, NULL, NULL, NULL); }

inline ns1__getTaskProcessReport * soap_new_req_ns1__getTaskProcessReport(struct soap *soap) { ns1__getTaskProcessReport *_p = soap_instantiate_ns1__getTaskProcessReport(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__getTaskProcessReport * soap_new_set_ns1__getTaskProcessReport(struct soap *soap, ns1__TaskProcessReport *arg0) { ns1__getTaskProcessReport *_p = soap_instantiate_ns1__getTaskProcessReport(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getTaskProcessReport::arg0 = arg0; } return _p; }

inline void soap_delete_ns1__getTaskProcessReport(struct soap *soap, ns1__getTaskProcessReport *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTaskProcessReport(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__SQLException
#define SOAP_TYPE_ns1__SQLException (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SQLException(struct soap*, const char*, int, const ns1__SQLException *, const char*);
SOAP_FMAC3 ns1__SQLException * SOAP_FMAC4 soap_in_ns1__SQLException(struct soap*, const char*, ns1__SQLException *, const char*);

#ifndef soap_write_ns1__SQLException
#define soap_write_ns1__SQLException(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:SQLException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__SQLException * SOAP_FMAC4 soap_get_ns1__SQLException(struct soap*, ns1__SQLException *, const char*, const char*);

#ifndef soap_read_ns1__SQLException
#define soap_read_ns1__SQLException(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__SQLException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__SQLException * SOAP_FMAC2 soap_instantiate_ns1__SQLException(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SQLException * soap_new_ns1__SQLException(struct soap *soap, int n = -1) { return soap_instantiate_ns1__SQLException(soap, n, NULL, NULL, NULL); }

inline ns1__SQLException * soap_new_req_ns1__SQLException(struct soap *soap) { ns1__SQLException *_p = soap_instantiate_ns1__SQLException(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__SQLException * soap_new_set_ns1__SQLException(struct soap *soap) { ns1__SQLException *_p = soap_instantiate_ns1__SQLException(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns1__SQLException(struct soap *soap, ns1__SQLException *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__SQLException(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__TaskExceptionReport
#define SOAP_TYPE_ns1__TaskExceptionReport (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaskExceptionReport(struct soap*, const char*, int, const ns1__TaskExceptionReport *, const char*);
SOAP_FMAC3 ns1__TaskExceptionReport * SOAP_FMAC4 soap_in_ns1__TaskExceptionReport(struct soap*, const char*, ns1__TaskExceptionReport *, const char*);

#ifndef soap_write_ns1__TaskExceptionReport
#define soap_write_ns1__TaskExceptionReport(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:TaskExceptionReport", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__TaskExceptionReport * SOAP_FMAC4 soap_get_ns1__TaskExceptionReport(struct soap*, ns1__TaskExceptionReport *, const char*, const char*);

#ifndef soap_read_ns1__TaskExceptionReport
#define soap_read_ns1__TaskExceptionReport(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__TaskExceptionReport(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__TaskExceptionReport * SOAP_FMAC2 soap_instantiate_ns1__TaskExceptionReport(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaskExceptionReport * soap_new_ns1__TaskExceptionReport(struct soap *soap, int n = -1) { return soap_instantiate_ns1__TaskExceptionReport(soap, n, NULL, NULL, NULL); }

inline ns1__TaskExceptionReport * soap_new_req_ns1__TaskExceptionReport(struct soap *soap, std::string& errID) { ns1__TaskExceptionReport *_p = soap_instantiate_ns1__TaskExceptionReport(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__TaskExceptionReport::errID = errID; } return _p; }

inline ns1__TaskExceptionReport * soap_new_set_ns1__TaskExceptionReport(struct soap *soap, std::string *peerID, ns1__TaskInfo *taskInfo, std::string& errID) { ns1__TaskExceptionReport *_p = soap_instantiate_ns1__TaskExceptionReport(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__TaskExceptionReport::peerID = peerID; _p->ns1__TaskExceptionReport::taskInfo = taskInfo; _p->ns1__TaskExceptionReport::errID = errID; } return _p; }

inline void soap_delete_ns1__TaskExceptionReport(struct soap *soap, ns1__TaskExceptionReport *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__TaskExceptionReport(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__dcpDetailBean
#define SOAP_TYPE_ns1__dcpDetailBean (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__dcpDetailBean(struct soap*, const char*, int, const ns1__dcpDetailBean *, const char*);
SOAP_FMAC3 ns1__dcpDetailBean * SOAP_FMAC4 soap_in_ns1__dcpDetailBean(struct soap*, const char*, ns1__dcpDetailBean *, const char*);

#ifndef soap_write_ns1__dcpDetailBean
#define soap_write_ns1__dcpDetailBean(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:dcpDetailBean", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__dcpDetailBean * SOAP_FMAC4 soap_get_ns1__dcpDetailBean(struct soap*, ns1__dcpDetailBean *, const char*, const char*);

#ifndef soap_read_ns1__dcpDetailBean
#define soap_read_ns1__dcpDetailBean(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__dcpDetailBean(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__dcpDetailBean * SOAP_FMAC2 soap_instantiate_ns1__dcpDetailBean(struct soap*, int, const char*, const char*, size_t*);

inline ns1__dcpDetailBean * soap_new_ns1__dcpDetailBean(struct soap *soap, int n = -1) { return soap_instantiate_ns1__dcpDetailBean(soap, n, NULL, NULL, NULL); }

inline ns1__dcpDetailBean * soap_new_req_ns1__dcpDetailBean(struct soap *soap) { ns1__dcpDetailBean *_p = soap_instantiate_ns1__dcpDetailBean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__dcpDetailBean * soap_new_set_ns1__dcpDetailBean(struct soap *soap, std::string *dcpTitle, std::string *ftpDownloadURL, std::string *uuid) { ns1__dcpDetailBean *_p = soap_instantiate_ns1__dcpDetailBean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__dcpDetailBean::dcpTitle = dcpTitle; _p->ns1__dcpDetailBean::ftpDownloadURL = ftpDownloadURL; _p->ns1__dcpDetailBean::uuid = uuid; } return _p; }

inline void soap_delete_ns1__dcpDetailBean(struct soap *soap, ns1__dcpDetailBean *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__dcpDetailBean(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__dcpBean
#define SOAP_TYPE_ns1__dcpBean (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__dcpBean(struct soap*, const char*, int, const ns1__dcpBean *, const char*);
SOAP_FMAC3 ns1__dcpBean * SOAP_FMAC4 soap_in_ns1__dcpBean(struct soap*, const char*, ns1__dcpBean *, const char*);

#ifndef soap_write_ns1__dcpBean
#define soap_write_ns1__dcpBean(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:dcpBean", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__dcpBean * SOAP_FMAC4 soap_get_ns1__dcpBean(struct soap*, ns1__dcpBean *, const char*, const char*);

#ifndef soap_read_ns1__dcpBean
#define soap_read_ns1__dcpBean(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__dcpBean(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__dcpBean * SOAP_FMAC2 soap_instantiate_ns1__dcpBean(struct soap*, int, const char*, const char*, size_t*);

inline ns1__dcpBean * soap_new_ns1__dcpBean(struct soap *soap, int n = -1) { return soap_instantiate_ns1__dcpBean(soap, n, NULL, NULL, NULL); }

inline ns1__dcpBean * soap_new_req_ns1__dcpBean(struct soap *soap, int resultCode) { ns1__dcpBean *_p = soap_instantiate_ns1__dcpBean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__dcpBean::resultCode = resultCode; } return _p; }

inline ns1__dcpBean * soap_new_set_ns1__dcpBean(struct soap *soap, std::vector<ns1__dcpDetailBean * >& record, int resultCode) { ns1__dcpBean *_p = soap_instantiate_ns1__dcpBean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__dcpBean::record = record; _p->ns1__dcpBean::resultCode = resultCode; } return _p; }

inline void soap_delete_ns1__dcpBean(struct soap *soap, ns1__dcpBean *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__dcpBean(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__TaskOper
#define SOAP_TYPE_ns1__TaskOper (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaskOper(struct soap*, const char*, int, const ns1__TaskOper *, const char*);
SOAP_FMAC3 ns1__TaskOper * SOAP_FMAC4 soap_in_ns1__TaskOper(struct soap*, const char*, ns1__TaskOper *, const char*);

#ifndef soap_write_ns1__TaskOper
#define soap_write_ns1__TaskOper(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:TaskOper", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__TaskOper * SOAP_FMAC4 soap_get_ns1__TaskOper(struct soap*, ns1__TaskOper *, const char*, const char*);

#ifndef soap_read_ns1__TaskOper
#define soap_read_ns1__TaskOper(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__TaskOper(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__TaskOper * SOAP_FMAC2 soap_instantiate_ns1__TaskOper(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaskOper * soap_new_ns1__TaskOper(struct soap *soap, int n = -1) { return soap_instantiate_ns1__TaskOper(soap, n, NULL, NULL, NULL); }

inline ns1__TaskOper * soap_new_req_ns1__TaskOper(struct soap *soap, std::vector<ns1__TaskInfo * >& taskInfoList) { ns1__TaskOper *_p = soap_instantiate_ns1__TaskOper(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__TaskOper::taskInfoList = taskInfoList; } return _p; }

inline ns1__TaskOper * soap_new_set_ns1__TaskOper(struct soap *soap, std::string *peerID, std::string *operType, std::vector<ns1__TaskInfo * >& taskInfoList) { ns1__TaskOper *_p = soap_instantiate_ns1__TaskOper(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__TaskOper::peerID = peerID; _p->ns1__TaskOper::operType = operType; _p->ns1__TaskOper::taskInfoList = taskInfoList; } return _p; }

inline void soap_delete_ns1__TaskOper(struct soap *soap, ns1__TaskOper *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__TaskOper(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__arrayList
#define SOAP_TYPE_ns1__arrayList (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__arrayList(struct soap*, const char*, int, const ns1__arrayList *, const char*);
SOAP_FMAC3 ns1__arrayList * SOAP_FMAC4 soap_in_ns1__arrayList(struct soap*, const char*, ns1__arrayList *, const char*);

#ifndef soap_write_ns1__arrayList
#define soap_write_ns1__arrayList(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:arrayList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__arrayList * SOAP_FMAC4 soap_get_ns1__arrayList(struct soap*, ns1__arrayList *, const char*, const char*);

#ifndef soap_read_ns1__arrayList
#define soap_read_ns1__arrayList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__arrayList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__arrayList * SOAP_FMAC2 soap_instantiate_ns1__arrayList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__arrayList * soap_new_ns1__arrayList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__arrayList(soap, n, NULL, NULL, NULL); }

inline ns1__arrayList * soap_new_req_ns1__arrayList(struct soap *soap) { ns1__arrayList *_p = soap_instantiate_ns1__arrayList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__arrayList * soap_new_set_ns1__arrayList(struct soap *soap) { ns1__arrayList *_p = soap_instantiate_ns1__arrayList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns1__arrayList(struct soap *soap, ns1__arrayList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__arrayList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__abstractList
#define SOAP_TYPE_ns1__abstractList (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__abstractList(struct soap*, const char*, int, const ns1__abstractList *, const char*);
SOAP_FMAC3 ns1__abstractList * SOAP_FMAC4 soap_in_ns1__abstractList(struct soap*, const char*, ns1__abstractList *, const char*);

#ifndef soap_write_ns1__abstractList
#define soap_write_ns1__abstractList(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:abstractList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__abstractList * SOAP_FMAC4 soap_get_ns1__abstractList(struct soap*, ns1__abstractList *, const char*, const char*);

#ifndef soap_read_ns1__abstractList
#define soap_read_ns1__abstractList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__abstractList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__abstractList * SOAP_FMAC2 soap_instantiate_ns1__abstractList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__abstractList * soap_new_ns1__abstractList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__abstractList(soap, n, NULL, NULL, NULL); }

inline ns1__abstractList * soap_new_req_ns1__abstractList(struct soap *soap) { ns1__abstractList *_p = soap_instantiate_ns1__abstractList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__abstractList * soap_new_set_ns1__abstractList(struct soap *soap) { ns1__abstractList *_p = soap_instantiate_ns1__abstractList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns1__abstractList(struct soap *soap, ns1__abstractList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__abstractList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__abstractCollection
#define SOAP_TYPE_ns1__abstractCollection (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__abstractCollection(struct soap*, const char*, int, const ns1__abstractCollection *, const char*);
SOAP_FMAC3 ns1__abstractCollection * SOAP_FMAC4 soap_in_ns1__abstractCollection(struct soap*, const char*, ns1__abstractCollection *, const char*);

#ifndef soap_write_ns1__abstractCollection
#define soap_write_ns1__abstractCollection(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:abstractCollection", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__abstractCollection * SOAP_FMAC4 soap_get_ns1__abstractCollection(struct soap*, ns1__abstractCollection *, const char*, const char*);

#ifndef soap_read_ns1__abstractCollection
#define soap_read_ns1__abstractCollection(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__abstractCollection(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__abstractCollection * SOAP_FMAC2 soap_instantiate_ns1__abstractCollection(struct soap*, int, const char*, const char*, size_t*);

inline ns1__abstractCollection * soap_new_ns1__abstractCollection(struct soap *soap, int n = -1) { return soap_instantiate_ns1__abstractCollection(soap, n, NULL, NULL, NULL); }

inline ns1__abstractCollection * soap_new_req_ns1__abstractCollection(struct soap *soap) { ns1__abstractCollection *_p = soap_instantiate_ns1__abstractCollection(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__abstractCollection * soap_new_set_ns1__abstractCollection(struct soap *soap) { ns1__abstractCollection *_p = soap_instantiate_ns1__abstractCollection(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns1__abstractCollection(struct soap *soap, ns1__abstractCollection *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__abstractCollection(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__TaskInfo
#define SOAP_TYPE_ns1__TaskInfo (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaskInfo(struct soap*, const char*, int, const ns1__TaskInfo *, const char*);
SOAP_FMAC3 ns1__TaskInfo * SOAP_FMAC4 soap_in_ns1__TaskInfo(struct soap*, const char*, ns1__TaskInfo *, const char*);

#ifndef soap_write_ns1__TaskInfo
#define soap_write_ns1__TaskInfo(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:TaskInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__TaskInfo * SOAP_FMAC4 soap_get_ns1__TaskInfo(struct soap*, ns1__TaskInfo *, const char*, const char*);

#ifndef soap_read_ns1__TaskInfo
#define soap_read_ns1__TaskInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__TaskInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__TaskInfo * SOAP_FMAC2 soap_instantiate_ns1__TaskInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaskInfo * soap_new_ns1__TaskInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns1__TaskInfo(soap, n, NULL, NULL, NULL); }

inline ns1__TaskInfo * soap_new_req_ns1__TaskInfo(struct soap *soap, std::string& packageName, std::string& torrentUrl, std::string& filedownloadPath, int State) { ns1__TaskInfo *_p = soap_instantiate_ns1__TaskInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__TaskInfo::packageName = packageName; _p->ns1__TaskInfo::torrentUrl = torrentUrl; _p->ns1__TaskInfo::filedownloadPath = filedownloadPath; _p->ns1__TaskInfo::State = State; } return _p; }

inline ns1__TaskInfo * soap_new_set_ns1__TaskInfo(struct soap *soap, std::string& packageName, std::string& torrentUrl, std::string& filedownloadPath, std::string *ftpAdress, std::string *baseStorageFtp, int State) { ns1__TaskInfo *_p = soap_instantiate_ns1__TaskInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__TaskInfo::packageName = packageName; _p->ns1__TaskInfo::torrentUrl = torrentUrl; _p->ns1__TaskInfo::filedownloadPath = filedownloadPath; _p->ns1__TaskInfo::ftpAdress = ftpAdress; _p->ns1__TaskInfo::baseStorageFtp = baseStorageFtp; _p->ns1__TaskInfo::State = State; } return _p; }

inline void soap_delete_ns1__TaskInfo(struct soap *soap, ns1__TaskInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__TaskInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__TaskProgress
#define SOAP_TYPE_ns1__TaskProgress (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaskProgress(struct soap*, const char*, int, const ns1__TaskProgress *, const char*);
SOAP_FMAC3 ns1__TaskProgress * SOAP_FMAC4 soap_in_ns1__TaskProgress(struct soap*, const char*, ns1__TaskProgress *, const char*);

#ifndef soap_write_ns1__TaskProgress
#define soap_write_ns1__TaskProgress(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:TaskProgress", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__TaskProgress * SOAP_FMAC4 soap_get_ns1__TaskProgress(struct soap*, ns1__TaskProgress *, const char*, const char*);

#ifndef soap_read_ns1__TaskProgress
#define soap_read_ns1__TaskProgress(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__TaskProgress(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__TaskProgress * SOAP_FMAC2 soap_instantiate_ns1__TaskProgress(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaskProgress * soap_new_ns1__TaskProgress(struct soap *soap, int n = -1) { return soap_instantiate_ns1__TaskProgress(soap, n, NULL, NULL, NULL); }

inline ns1__TaskProgress * soap_new_req_ns1__TaskProgress(struct soap *soap, ns1__TaskInfo *taskInfo, int totalPeerCnt, int connectingPeerCnt, int connectedPeerCnt, int downloadRate, int uploadRate, LONG64 downloaded, LONG64 uploaded, float percentCmp) { ns1__TaskProgress *_p = soap_instantiate_ns1__TaskProgress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__TaskProgress::taskInfo = taskInfo; _p->ns1__TaskProgress::totalPeerCnt = totalPeerCnt; _p->ns1__TaskProgress::connectingPeerCnt = connectingPeerCnt; _p->ns1__TaskProgress::connectedPeerCnt = connectedPeerCnt; _p->ns1__TaskProgress::downloadRate = downloadRate; _p->ns1__TaskProgress::uploadRate = uploadRate; _p->ns1__TaskProgress::downloaded = downloaded; _p->ns1__TaskProgress::uploaded = uploaded; _p->ns1__TaskProgress::percentCmp = percentCmp; } return _p; }

inline ns1__TaskProgress * soap_new_set_ns1__TaskProgress(struct soap *soap, ns1__TaskInfo *taskInfo, int totalPeerCnt, int connectingPeerCnt, int connectedPeerCnt, int downloadRate, int uploadRate, LONG64 downloaded, LONG64 uploaded, float percentCmp) { ns1__TaskProgress *_p = soap_instantiate_ns1__TaskProgress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__TaskProgress::taskInfo = taskInfo; _p->ns1__TaskProgress::totalPeerCnt = totalPeerCnt; _p->ns1__TaskProgress::connectingPeerCnt = connectingPeerCnt; _p->ns1__TaskProgress::connectedPeerCnt = connectedPeerCnt; _p->ns1__TaskProgress::downloadRate = downloadRate; _p->ns1__TaskProgress::uploadRate = uploadRate; _p->ns1__TaskProgress::downloaded = downloaded; _p->ns1__TaskProgress::uploaded = uploaded; _p->ns1__TaskProgress::percentCmp = percentCmp; } return _p; }

inline void soap_delete_ns1__TaskProgress(struct soap *soap, ns1__TaskProgress *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__TaskProgress(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__TaskProcessReport
#define SOAP_TYPE_ns1__TaskProcessReport (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaskProcessReport(struct soap*, const char*, int, const ns1__TaskProcessReport *, const char*);
SOAP_FMAC3 ns1__TaskProcessReport * SOAP_FMAC4 soap_in_ns1__TaskProcessReport(struct soap*, const char*, ns1__TaskProcessReport *, const char*);

#ifndef soap_write_ns1__TaskProcessReport
#define soap_write_ns1__TaskProcessReport(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:TaskProcessReport", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__TaskProcessReport * SOAP_FMAC4 soap_get_ns1__TaskProcessReport(struct soap*, ns1__TaskProcessReport *, const char*, const char*);

#ifndef soap_read_ns1__TaskProcessReport
#define soap_read_ns1__TaskProcessReport(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__TaskProcessReport(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__TaskProcessReport * SOAP_FMAC2 soap_instantiate_ns1__TaskProcessReport(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaskProcessReport * soap_new_ns1__TaskProcessReport(struct soap *soap, int n = -1) { return soap_instantiate_ns1__TaskProcessReport(soap, n, NULL, NULL, NULL); }

inline ns1__TaskProcessReport * soap_new_req_ns1__TaskProcessReport(struct soap *soap, std::vector<ns1__TaskProgress * >& taskProgressList) { ns1__TaskProcessReport *_p = soap_instantiate_ns1__TaskProcessReport(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__TaskProcessReport::taskProgressList = taskProgressList; } return _p; }

inline ns1__TaskProcessReport * soap_new_set_ns1__TaskProcessReport(struct soap *soap, std::string *peerID, std::vector<ns1__TaskProgress * >& taskProgressList) { ns1__TaskProcessReport *_p = soap_instantiate_ns1__TaskProcessReport(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__TaskProcessReport::peerID = peerID; _p->ns1__TaskProcessReport::taskProgressList = taskProgressList; } return _p; }

inline void soap_delete_ns1__TaskProcessReport(struct soap *soap, ns1__TaskProcessReport *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__TaskProcessReport(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Fault(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Header(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___ns1__getExceptionReport
#define SOAP_TYPE___ns1__getExceptionReport (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getExceptionReport(struct soap*, struct __ns1__getExceptionReport *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getExceptionReport(struct soap*, const struct __ns1__getExceptionReport *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getExceptionReport(struct soap*, const char*, int, const struct __ns1__getExceptionReport *, const char*);
SOAP_FMAC3 struct __ns1__getExceptionReport * SOAP_FMAC4 soap_in___ns1__getExceptionReport(struct soap*, const char*, struct __ns1__getExceptionReport *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getExceptionReport(struct soap*, const struct __ns1__getExceptionReport *, const char*, const char*);

#ifndef soap_write___ns1__getExceptionReport
#define soap_write___ns1__getExceptionReport(soap, data) ( soap_begin(soap), soap_serialize___ns1__getExceptionReport(soap, data), soap_begin_send(soap) || soap_put___ns1__getExceptionReport(soap, data, "-ns1:getExceptionReport", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__getExceptionReport * SOAP_FMAC4 soap_get___ns1__getExceptionReport(struct soap*, struct __ns1__getExceptionReport *, const char*, const char*);

#ifndef soap_read___ns1__getExceptionReport
#define soap_read___ns1__getExceptionReport(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getExceptionReport(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__getExceptionReport * SOAP_FMAC2 soap_instantiate___ns1__getExceptionReport(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getExceptionReport * soap_new___ns1__getExceptionReport(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getExceptionReport(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getExceptionReport * soap_new_req___ns1__getExceptionReport(struct soap *soap) { struct __ns1__getExceptionReport *_p = soap_instantiate___ns1__getExceptionReport(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getExceptionReport(soap, _p); } return _p; }

inline struct __ns1__getExceptionReport * soap_new_set___ns1__getExceptionReport(struct soap *soap, ns1__getExceptionReport *ns1__getExceptionReport_) { struct __ns1__getExceptionReport *_p = soap_instantiate___ns1__getExceptionReport(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getExceptionReport(soap, _p); _p->ns1__getExceptionReport_ = ns1__getExceptionReport_; } return _p; }

inline void soap_delete___ns1__getExceptionReport(struct soap *soap, struct __ns1__getExceptionReport *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getExceptionReport(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getDcp
#define SOAP_TYPE___ns1__getDcp (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getDcp(struct soap*, struct __ns1__getDcp *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getDcp(struct soap*, const struct __ns1__getDcp *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getDcp(struct soap*, const char*, int, const struct __ns1__getDcp *, const char*);
SOAP_FMAC3 struct __ns1__getDcp * SOAP_FMAC4 soap_in___ns1__getDcp(struct soap*, const char*, struct __ns1__getDcp *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getDcp(struct soap*, const struct __ns1__getDcp *, const char*, const char*);

#ifndef soap_write___ns1__getDcp
#define soap_write___ns1__getDcp(soap, data) ( soap_begin(soap), soap_serialize___ns1__getDcp(soap, data), soap_begin_send(soap) || soap_put___ns1__getDcp(soap, data, "-ns1:getDcp", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__getDcp * SOAP_FMAC4 soap_get___ns1__getDcp(struct soap*, struct __ns1__getDcp *, const char*, const char*);

#ifndef soap_read___ns1__getDcp
#define soap_read___ns1__getDcp(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getDcp(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__getDcp * SOAP_FMAC2 soap_instantiate___ns1__getDcp(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getDcp * soap_new___ns1__getDcp(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getDcp(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getDcp * soap_new_req___ns1__getDcp(struct soap *soap) { struct __ns1__getDcp *_p = soap_instantiate___ns1__getDcp(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getDcp(soap, _p); } return _p; }

inline struct __ns1__getDcp * soap_new_set___ns1__getDcp(struct soap *soap, ns1__getDcp *ns1__getDcp_) { struct __ns1__getDcp *_p = soap_instantiate___ns1__getDcp(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getDcp(soap, _p); _p->ns1__getDcp_ = ns1__getDcp_; } return _p; }

inline void soap_delete___ns1__getDcp(struct soap *soap, struct __ns1__getDcp *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getDcp(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__sendTaskProcess
#define SOAP_TYPE___ns1__sendTaskProcess (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__sendTaskProcess(struct soap*, struct __ns1__sendTaskProcess *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__sendTaskProcess(struct soap*, const struct __ns1__sendTaskProcess *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__sendTaskProcess(struct soap*, const char*, int, const struct __ns1__sendTaskProcess *, const char*);
SOAP_FMAC3 struct __ns1__sendTaskProcess * SOAP_FMAC4 soap_in___ns1__sendTaskProcess(struct soap*, const char*, struct __ns1__sendTaskProcess *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__sendTaskProcess(struct soap*, const struct __ns1__sendTaskProcess *, const char*, const char*);

#ifndef soap_write___ns1__sendTaskProcess
#define soap_write___ns1__sendTaskProcess(soap, data) ( soap_begin(soap), soap_serialize___ns1__sendTaskProcess(soap, data), soap_begin_send(soap) || soap_put___ns1__sendTaskProcess(soap, data, "-ns1:sendTaskProcess", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__sendTaskProcess * SOAP_FMAC4 soap_get___ns1__sendTaskProcess(struct soap*, struct __ns1__sendTaskProcess *, const char*, const char*);

#ifndef soap_read___ns1__sendTaskProcess
#define soap_read___ns1__sendTaskProcess(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__sendTaskProcess(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__sendTaskProcess * SOAP_FMAC2 soap_instantiate___ns1__sendTaskProcess(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__sendTaskProcess * soap_new___ns1__sendTaskProcess(struct soap *soap, int n = -1) { return soap_instantiate___ns1__sendTaskProcess(soap, n, NULL, NULL, NULL); }

inline struct __ns1__sendTaskProcess * soap_new_req___ns1__sendTaskProcess(struct soap *soap) { struct __ns1__sendTaskProcess *_p = soap_instantiate___ns1__sendTaskProcess(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__sendTaskProcess(soap, _p); } return _p; }

inline struct __ns1__sendTaskProcess * soap_new_set___ns1__sendTaskProcess(struct soap *soap, ns1__sendTaskProcess *ns1__sendTaskProcess_) { struct __ns1__sendTaskProcess *_p = soap_instantiate___ns1__sendTaskProcess(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__sendTaskProcess(soap, _p); _p->ns1__sendTaskProcess_ = ns1__sendTaskProcess_; } return _p; }

inline void soap_delete___ns1__sendTaskProcess(struct soap *soap, struct __ns1__sendTaskProcess *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__sendTaskProcess(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getPackList
#define SOAP_TYPE___ns1__getPackList (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getPackList(struct soap*, struct __ns1__getPackList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getPackList(struct soap*, const struct __ns1__getPackList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getPackList(struct soap*, const char*, int, const struct __ns1__getPackList *, const char*);
SOAP_FMAC3 struct __ns1__getPackList * SOAP_FMAC4 soap_in___ns1__getPackList(struct soap*, const char*, struct __ns1__getPackList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getPackList(struct soap*, const struct __ns1__getPackList *, const char*, const char*);

#ifndef soap_write___ns1__getPackList
#define soap_write___ns1__getPackList(soap, data) ( soap_begin(soap), soap_serialize___ns1__getPackList(soap, data), soap_begin_send(soap) || soap_put___ns1__getPackList(soap, data, "-ns1:getPackList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__getPackList * SOAP_FMAC4 soap_get___ns1__getPackList(struct soap*, struct __ns1__getPackList *, const char*, const char*);

#ifndef soap_read___ns1__getPackList
#define soap_read___ns1__getPackList(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getPackList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__getPackList * SOAP_FMAC2 soap_instantiate___ns1__getPackList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getPackList * soap_new___ns1__getPackList(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getPackList(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getPackList * soap_new_req___ns1__getPackList(struct soap *soap) { struct __ns1__getPackList *_p = soap_instantiate___ns1__getPackList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getPackList(soap, _p); } return _p; }

inline struct __ns1__getPackList * soap_new_set___ns1__getPackList(struct soap *soap, ns1__getPackList *ns1__getPackList_) { struct __ns1__getPackList *_p = soap_instantiate___ns1__getPackList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getPackList(soap, _p); _p->ns1__getPackList_ = ns1__getPackList_; } return _p; }

inline void soap_delete___ns1__getPackList(struct soap *soap, struct __ns1__getPackList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getPackList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getTaskProcessReport
#define SOAP_TYPE___ns1__getTaskProcessReport (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getTaskProcessReport(struct soap*, struct __ns1__getTaskProcessReport *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getTaskProcessReport(struct soap*, const struct __ns1__getTaskProcessReport *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getTaskProcessReport(struct soap*, const char*, int, const struct __ns1__getTaskProcessReport *, const char*);
SOAP_FMAC3 struct __ns1__getTaskProcessReport * SOAP_FMAC4 soap_in___ns1__getTaskProcessReport(struct soap*, const char*, struct __ns1__getTaskProcessReport *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getTaskProcessReport(struct soap*, const struct __ns1__getTaskProcessReport *, const char*, const char*);

#ifndef soap_write___ns1__getTaskProcessReport
#define soap_write___ns1__getTaskProcessReport(soap, data) ( soap_begin(soap), soap_serialize___ns1__getTaskProcessReport(soap, data), soap_begin_send(soap) || soap_put___ns1__getTaskProcessReport(soap, data, "-ns1:getTaskProcessReport", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__getTaskProcessReport * SOAP_FMAC4 soap_get___ns1__getTaskProcessReport(struct soap*, struct __ns1__getTaskProcessReport *, const char*, const char*);

#ifndef soap_read___ns1__getTaskProcessReport
#define soap_read___ns1__getTaskProcessReport(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getTaskProcessReport(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__getTaskProcessReport * SOAP_FMAC2 soap_instantiate___ns1__getTaskProcessReport(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getTaskProcessReport * soap_new___ns1__getTaskProcessReport(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getTaskProcessReport(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getTaskProcessReport * soap_new_req___ns1__getTaskProcessReport(struct soap *soap) { struct __ns1__getTaskProcessReport *_p = soap_instantiate___ns1__getTaskProcessReport(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTaskProcessReport(soap, _p); } return _p; }

inline struct __ns1__getTaskProcessReport * soap_new_set___ns1__getTaskProcessReport(struct soap *soap, ns1__getTaskProcessReport *ns1__getTaskProcessReport_) { struct __ns1__getTaskProcessReport *_p = soap_instantiate___ns1__getTaskProcessReport(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getTaskProcessReport(soap, _p); _p->ns1__getTaskProcessReport_ = ns1__getTaskProcessReport_; } return _p; }

inline void soap_delete___ns1__getTaskProcessReport(struct soap *soap, struct __ns1__getTaskProcessReport *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getTaskProcessReport(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, ns1__SQLException *ns1__SQLException_, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->ns1__SQLException_ = ns1__SQLException_; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTons1__getExceptionReportResponse
#define SOAP_TYPE_PointerTons1__getExceptionReportResponse (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getExceptionReportResponse(struct soap*, ns1__getExceptionReportResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getExceptionReportResponse(struct soap*, const char *, int, ns1__getExceptionReportResponse *const*, const char *);
SOAP_FMAC3 ns1__getExceptionReportResponse ** SOAP_FMAC4 soap_in_PointerTons1__getExceptionReportResponse(struct soap*, const char*, ns1__getExceptionReportResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getExceptionReportResponse(struct soap*, ns1__getExceptionReportResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getExceptionReportResponse
#define soap_write_PointerTons1__getExceptionReportResponse(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__getExceptionReportResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__getExceptionReportResponse(soap, data, "ns1:getExceptionReportResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getExceptionReportResponse ** SOAP_FMAC4 soap_get_PointerTons1__getExceptionReportResponse(struct soap*, ns1__getExceptionReportResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__getExceptionReportResponse
#define soap_read_PointerTons1__getExceptionReportResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getExceptionReportResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getExceptionReport
#define SOAP_TYPE_PointerTons1__getExceptionReport (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getExceptionReport(struct soap*, ns1__getExceptionReport *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getExceptionReport(struct soap*, const char *, int, ns1__getExceptionReport *const*, const char *);
SOAP_FMAC3 ns1__getExceptionReport ** SOAP_FMAC4 soap_in_PointerTons1__getExceptionReport(struct soap*, const char*, ns1__getExceptionReport **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getExceptionReport(struct soap*, ns1__getExceptionReport *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getExceptionReport
#define soap_write_PointerTons1__getExceptionReport(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__getExceptionReport(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__getExceptionReport(soap, data, "ns1:getExceptionReport", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getExceptionReport ** SOAP_FMAC4 soap_get_PointerTons1__getExceptionReport(struct soap*, ns1__getExceptionReport **, const char*, const char*);

#ifndef soap_read_PointerTons1__getExceptionReport
#define soap_read_PointerTons1__getExceptionReport(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getExceptionReport(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getDcpResponse
#define SOAP_TYPE_PointerTons1__getDcpResponse (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getDcpResponse(struct soap*, ns1__getDcpResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getDcpResponse(struct soap*, const char *, int, ns1__getDcpResponse *const*, const char *);
SOAP_FMAC3 ns1__getDcpResponse ** SOAP_FMAC4 soap_in_PointerTons1__getDcpResponse(struct soap*, const char*, ns1__getDcpResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getDcpResponse(struct soap*, ns1__getDcpResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getDcpResponse
#define soap_write_PointerTons1__getDcpResponse(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__getDcpResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__getDcpResponse(soap, data, "ns1:getDcpResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getDcpResponse ** SOAP_FMAC4 soap_get_PointerTons1__getDcpResponse(struct soap*, ns1__getDcpResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__getDcpResponse
#define soap_read_PointerTons1__getDcpResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getDcpResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getDcp
#define SOAP_TYPE_PointerTons1__getDcp (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getDcp(struct soap*, ns1__getDcp *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getDcp(struct soap*, const char *, int, ns1__getDcp *const*, const char *);
SOAP_FMAC3 ns1__getDcp ** SOAP_FMAC4 soap_in_PointerTons1__getDcp(struct soap*, const char*, ns1__getDcp **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getDcp(struct soap*, ns1__getDcp *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getDcp
#define soap_write_PointerTons1__getDcp(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__getDcp(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__getDcp(soap, data, "ns1:getDcp", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getDcp ** SOAP_FMAC4 soap_get_PointerTons1__getDcp(struct soap*, ns1__getDcp **, const char*, const char*);

#ifndef soap_read_PointerTons1__getDcp
#define soap_read_PointerTons1__getDcp(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getDcp(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__sendTaskProcessResponse
#define SOAP_TYPE_PointerTons1__sendTaskProcessResponse (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sendTaskProcessResponse(struct soap*, ns1__sendTaskProcessResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sendTaskProcessResponse(struct soap*, const char *, int, ns1__sendTaskProcessResponse *const*, const char *);
SOAP_FMAC3 ns1__sendTaskProcessResponse ** SOAP_FMAC4 soap_in_PointerTons1__sendTaskProcessResponse(struct soap*, const char*, ns1__sendTaskProcessResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sendTaskProcessResponse(struct soap*, ns1__sendTaskProcessResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__sendTaskProcessResponse
#define soap_write_PointerTons1__sendTaskProcessResponse(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__sendTaskProcessResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__sendTaskProcessResponse(soap, data, "ns1:sendTaskProcessResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__sendTaskProcessResponse ** SOAP_FMAC4 soap_get_PointerTons1__sendTaskProcessResponse(struct soap*, ns1__sendTaskProcessResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__sendTaskProcessResponse
#define soap_read_PointerTons1__sendTaskProcessResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__sendTaskProcessResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__sendTaskProcess
#define SOAP_TYPE_PointerTons1__sendTaskProcess (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sendTaskProcess(struct soap*, ns1__sendTaskProcess *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sendTaskProcess(struct soap*, const char *, int, ns1__sendTaskProcess *const*, const char *);
SOAP_FMAC3 ns1__sendTaskProcess ** SOAP_FMAC4 soap_in_PointerTons1__sendTaskProcess(struct soap*, const char*, ns1__sendTaskProcess **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sendTaskProcess(struct soap*, ns1__sendTaskProcess *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__sendTaskProcess
#define soap_write_PointerTons1__sendTaskProcess(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__sendTaskProcess(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__sendTaskProcess(soap, data, "ns1:sendTaskProcess", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__sendTaskProcess ** SOAP_FMAC4 soap_get_PointerTons1__sendTaskProcess(struct soap*, ns1__sendTaskProcess **, const char*, const char*);

#ifndef soap_read_PointerTons1__sendTaskProcess
#define soap_read_PointerTons1__sendTaskProcess(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__sendTaskProcess(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getPackListResponse
#define SOAP_TYPE_PointerTons1__getPackListResponse (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getPackListResponse(struct soap*, ns1__getPackListResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getPackListResponse(struct soap*, const char *, int, ns1__getPackListResponse *const*, const char *);
SOAP_FMAC3 ns1__getPackListResponse ** SOAP_FMAC4 soap_in_PointerTons1__getPackListResponse(struct soap*, const char*, ns1__getPackListResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getPackListResponse(struct soap*, ns1__getPackListResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getPackListResponse
#define soap_write_PointerTons1__getPackListResponse(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__getPackListResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__getPackListResponse(soap, data, "ns1:getPackListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getPackListResponse ** SOAP_FMAC4 soap_get_PointerTons1__getPackListResponse(struct soap*, ns1__getPackListResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__getPackListResponse
#define soap_read_PointerTons1__getPackListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getPackListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getPackList
#define SOAP_TYPE_PointerTons1__getPackList (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getPackList(struct soap*, ns1__getPackList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getPackList(struct soap*, const char *, int, ns1__getPackList *const*, const char *);
SOAP_FMAC3 ns1__getPackList ** SOAP_FMAC4 soap_in_PointerTons1__getPackList(struct soap*, const char*, ns1__getPackList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getPackList(struct soap*, ns1__getPackList *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getPackList
#define soap_write_PointerTons1__getPackList(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__getPackList(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__getPackList(soap, data, "ns1:getPackList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getPackList ** SOAP_FMAC4 soap_get_PointerTons1__getPackList(struct soap*, ns1__getPackList **, const char*, const char*);

#ifndef soap_read_PointerTons1__getPackList
#define soap_read_PointerTons1__getPackList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getPackList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getTaskProcessReportResponse
#define SOAP_TYPE_PointerTons1__getTaskProcessReportResponse (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getTaskProcessReportResponse(struct soap*, ns1__getTaskProcessReportResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getTaskProcessReportResponse(struct soap*, const char *, int, ns1__getTaskProcessReportResponse *const*, const char *);
SOAP_FMAC3 ns1__getTaskProcessReportResponse ** SOAP_FMAC4 soap_in_PointerTons1__getTaskProcessReportResponse(struct soap*, const char*, ns1__getTaskProcessReportResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getTaskProcessReportResponse(struct soap*, ns1__getTaskProcessReportResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getTaskProcessReportResponse
#define soap_write_PointerTons1__getTaskProcessReportResponse(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__getTaskProcessReportResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__getTaskProcessReportResponse(soap, data, "ns1:getTaskProcessReportResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getTaskProcessReportResponse ** SOAP_FMAC4 soap_get_PointerTons1__getTaskProcessReportResponse(struct soap*, ns1__getTaskProcessReportResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__getTaskProcessReportResponse
#define soap_read_PointerTons1__getTaskProcessReportResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getTaskProcessReportResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getTaskProcessReport
#define SOAP_TYPE_PointerTons1__getTaskProcessReport (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getTaskProcessReport(struct soap*, ns1__getTaskProcessReport *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getTaskProcessReport(struct soap*, const char *, int, ns1__getTaskProcessReport *const*, const char *);
SOAP_FMAC3 ns1__getTaskProcessReport ** SOAP_FMAC4 soap_in_PointerTons1__getTaskProcessReport(struct soap*, const char*, ns1__getTaskProcessReport **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getTaskProcessReport(struct soap*, ns1__getTaskProcessReport *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getTaskProcessReport
#define soap_write_PointerTons1__getTaskProcessReport(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__getTaskProcessReport(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__getTaskProcessReport(soap, data, "ns1:getTaskProcessReport", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getTaskProcessReport ** SOAP_FMAC4 soap_get_PointerTons1__getTaskProcessReport(struct soap*, ns1__getTaskProcessReport **, const char*, const char*);

#ifndef soap_read_PointerTons1__getTaskProcessReport
#define soap_read_PointerTons1__getTaskProcessReport(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getTaskProcessReport(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__SQLException
#define SOAP_TYPE_PointerTons1__SQLException (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SQLException(struct soap*, ns1__SQLException *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SQLException(struct soap*, const char *, int, ns1__SQLException *const*, const char *);
SOAP_FMAC3 ns1__SQLException ** SOAP_FMAC4 soap_in_PointerTons1__SQLException(struct soap*, const char*, ns1__SQLException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SQLException(struct soap*, ns1__SQLException *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__SQLException
#define soap_write_PointerTons1__SQLException(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__SQLException(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__SQLException(soap, data, "ns1:SQLException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__SQLException ** SOAP_FMAC4 soap_get_PointerTons1__SQLException(struct soap*, ns1__SQLException **, const char*, const char*);

#ifndef soap_read_PointerTons1__SQLException
#define soap_read_PointerTons1__SQLException(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__SQLException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__TaskExceptionReport
#define SOAP_TYPE_PointerTons1__TaskExceptionReport (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaskExceptionReport(struct soap*, ns1__TaskExceptionReport *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaskExceptionReport(struct soap*, const char *, int, ns1__TaskExceptionReport *const*, const char *);
SOAP_FMAC3 ns1__TaskExceptionReport ** SOAP_FMAC4 soap_in_PointerTons1__TaskExceptionReport(struct soap*, const char*, ns1__TaskExceptionReport **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaskExceptionReport(struct soap*, ns1__TaskExceptionReport *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__TaskExceptionReport
#define soap_write_PointerTons1__TaskExceptionReport(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__TaskExceptionReport(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__TaskExceptionReport(soap, data, "ns1:TaskExceptionReport", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__TaskExceptionReport ** SOAP_FMAC4 soap_get_PointerTons1__TaskExceptionReport(struct soap*, ns1__TaskExceptionReport **, const char*, const char*);

#ifndef soap_read_PointerTons1__TaskExceptionReport
#define soap_read_PointerTons1__TaskExceptionReport(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__TaskExceptionReport(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__dcpBean
#define SOAP_TYPE_PointerTons1__dcpBean (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__dcpBean(struct soap*, ns1__dcpBean *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__dcpBean(struct soap*, const char *, int, ns1__dcpBean *const*, const char *);
SOAP_FMAC3 ns1__dcpBean ** SOAP_FMAC4 soap_in_PointerTons1__dcpBean(struct soap*, const char*, ns1__dcpBean **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__dcpBean(struct soap*, ns1__dcpBean *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__dcpBean
#define soap_write_PointerTons1__dcpBean(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__dcpBean(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__dcpBean(soap, data, "ns1:dcpBean", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__dcpBean ** SOAP_FMAC4 soap_get_PointerTons1__dcpBean(struct soap*, ns1__dcpBean **, const char*, const char*);

#ifndef soap_read_PointerTons1__dcpBean
#define soap_read_PointerTons1__dcpBean(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__dcpBean(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__TaskOper
#define SOAP_TYPE_PointerTons1__TaskOper (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaskOper(struct soap*, ns1__TaskOper *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaskOper(struct soap*, const char *, int, ns1__TaskOper *const*, const char *);
SOAP_FMAC3 ns1__TaskOper ** SOAP_FMAC4 soap_in_PointerTons1__TaskOper(struct soap*, const char*, ns1__TaskOper **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaskOper(struct soap*, ns1__TaskOper *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__TaskOper
#define soap_write_PointerTons1__TaskOper(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__TaskOper(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__TaskOper(soap, data, "ns1:TaskOper", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__TaskOper ** SOAP_FMAC4 soap_get_PointerTons1__TaskOper(struct soap*, ns1__TaskOper **, const char*, const char*);

#ifndef soap_read_PointerTons1__TaskOper
#define soap_read_PointerTons1__TaskOper(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__TaskOper(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__TaskProcessReport
#define SOAP_TYPE_PointerTons1__TaskProcessReport (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaskProcessReport(struct soap*, ns1__TaskProcessReport *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaskProcessReport(struct soap*, const char *, int, ns1__TaskProcessReport *const*, const char *);
SOAP_FMAC3 ns1__TaskProcessReport ** SOAP_FMAC4 soap_in_PointerTons1__TaskProcessReport(struct soap*, const char*, ns1__TaskProcessReport **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaskProcessReport(struct soap*, ns1__TaskProcessReport *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__TaskProcessReport
#define soap_write_PointerTons1__TaskProcessReport(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__TaskProcessReport(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__TaskProcessReport(soap, data, "ns1:TaskProcessReport", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__TaskProcessReport ** SOAP_FMAC4 soap_get_PointerTons1__TaskProcessReport(struct soap*, ns1__TaskProcessReport **, const char*, const char*);

#ifndef soap_read_PointerTons1__TaskProcessReport
#define soap_read_PointerTons1__TaskProcessReport(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__TaskProcessReport(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__dcpDetailBean
#define SOAP_TYPE_PointerTons1__dcpDetailBean (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__dcpDetailBean(struct soap*, ns1__dcpDetailBean *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__dcpDetailBean(struct soap*, const char *, int, ns1__dcpDetailBean *const*, const char *);
SOAP_FMAC3 ns1__dcpDetailBean ** SOAP_FMAC4 soap_in_PointerTons1__dcpDetailBean(struct soap*, const char*, ns1__dcpDetailBean **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__dcpDetailBean(struct soap*, ns1__dcpDetailBean *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__dcpDetailBean
#define soap_write_PointerTons1__dcpDetailBean(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__dcpDetailBean(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__dcpDetailBean(soap, data, "ns1:dcpDetailBean", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__dcpDetailBean ** SOAP_FMAC4 soap_get_PointerTons1__dcpDetailBean(struct soap*, ns1__dcpDetailBean **, const char*, const char*);

#ifndef soap_read_PointerTons1__dcpDetailBean
#define soap_read_PointerTons1__dcpDetailBean(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__dcpDetailBean(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__TaskInfo
#define SOAP_TYPE_PointerTons1__TaskInfo (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaskInfo(struct soap*, ns1__TaskInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaskInfo(struct soap*, const char *, int, ns1__TaskInfo *const*, const char *);
SOAP_FMAC3 ns1__TaskInfo ** SOAP_FMAC4 soap_in_PointerTons1__TaskInfo(struct soap*, const char*, ns1__TaskInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaskInfo(struct soap*, ns1__TaskInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__TaskInfo
#define soap_write_PointerTons1__TaskInfo(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__TaskInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__TaskInfo(soap, data, "ns1:TaskInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__TaskInfo ** SOAP_FMAC4 soap_get_PointerTons1__TaskInfo(struct soap*, ns1__TaskInfo **, const char*, const char*);

#ifndef soap_read_PointerTons1__TaskInfo
#define soap_read_PointerTons1__TaskInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__TaskInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__TaskProgress
#define SOAP_TYPE_PointerTons1__TaskProgress (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaskProgress(struct soap*, ns1__TaskProgress *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaskProgress(struct soap*, const char *, int, ns1__TaskProgress *const*, const char *);
SOAP_FMAC3 ns1__TaskProgress ** SOAP_FMAC4 soap_in_PointerTons1__TaskProgress(struct soap*, const char*, ns1__TaskProgress **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaskProgress(struct soap*, ns1__TaskProgress *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__TaskProgress
#define soap_write_PointerTons1__TaskProgress(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__TaskProgress(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__TaskProgress(soap, data, "ns1:TaskProgress", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__TaskProgress ** SOAP_FMAC4 soap_get_PointerTons1__TaskProgress(struct soap*, ns1__TaskProgress **, const char*, const char*);

#ifndef soap_read_PointerTons1__TaskProgress
#define soap_read_PointerTons1__TaskProgress(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__TaskProgress(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_begin(soap), soap_serialize_PointerTostd__string(soap, data), soap_begin_send(soap) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_begin(soap), soap_serialize__QName(soap, data), soap_begin_send(soap) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_begin(soap), soap_serialize_string(soap, data), soap_begin_send(soap) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__dcpDetailBean
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__dcpDetailBean (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__dcpDetailBean(struct soap*, std::vector<ns1__dcpDetailBean * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__dcpDetailBean(struct soap*, const std::vector<ns1__dcpDetailBean * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__dcpDetailBean(struct soap*, const char*, int, const std::vector<ns1__dcpDetailBean * >*, const char*);
SOAP_FMAC3 std::vector<ns1__dcpDetailBean * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__dcpDetailBean(struct soap*, const char*, std::vector<ns1__dcpDetailBean * >*, const char*);
SOAP_FMAC1 std::vector<ns1__dcpDetailBean * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__dcpDetailBean(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__dcpDetailBean * > * soap_new_std__vectorTemplateOfPointerTons1__dcpDetailBean(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__dcpDetailBean(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__dcpDetailBean(struct soap *soap, std::vector<ns1__dcpDetailBean * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__dcpDetailBean(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__TaskInfo
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__TaskInfo (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__TaskInfo(struct soap*, std::vector<ns1__TaskInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__TaskInfo(struct soap*, const std::vector<ns1__TaskInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__TaskInfo(struct soap*, const char*, int, const std::vector<ns1__TaskInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns1__TaskInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__TaskInfo(struct soap*, const char*, std::vector<ns1__TaskInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns1__TaskInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__TaskInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__TaskInfo * > * soap_new_std__vectorTemplateOfPointerTons1__TaskInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__TaskInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__TaskInfo(struct soap *soap, std::vector<ns1__TaskInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__TaskInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__TaskProgress
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__TaskProgress (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__TaskProgress(struct soap*, std::vector<ns1__TaskProgress * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__TaskProgress(struct soap*, const std::vector<ns1__TaskProgress * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__TaskProgress(struct soap*, const char*, int, const std::vector<ns1__TaskProgress * >*, const char*);
SOAP_FMAC3 std::vector<ns1__TaskProgress * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__TaskProgress(struct soap*, const char*, std::vector<ns1__TaskProgress * >*, const char*);
SOAP_FMAC1 std::vector<ns1__TaskProgress * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__TaskProgress(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__TaskProgress * > * soap_new_std__vectorTemplateOfPointerTons1__TaskProgress(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__TaskProgress(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__TaskProgress(struct soap *soap, std::vector<ns1__TaskProgress * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__TaskProgress(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
