/* soapIPeerServiceServiceSoapBindingProxy.h
   Generated by gSOAP 2.7.16 from peerWS.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapIPeerServiceServiceSoapBindingProxy_H
#define soapIPeerServiceServiceSoapBindingProxy_H
#include "soapH.h"
class IPeerServiceServiceSoapBinding
{   public:
	/// Runtime engine context allocated in constructor
	struct soap *soap;
	/// Endpoint URL of service 'IPeerServiceServiceSoapBinding' (change as needed)
	const char *endpoint;
	/// Constructor allocates soap engine context, sets default endpoint URL, and sets namespace mapping table
	IPeerServiceServiceSoapBinding()
	{ soap = soap_new(); endpoint =WS_WEBSERVICE_HOST; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] = 
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://tempuri.org/ns.xsd", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap->namespaces = namespaces; } };
	/// Destructor frees deserialized data and soap engine context
	virtual ~IPeerServiceServiceSoapBinding() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	/// Invoke 'getTaskProcessReport' of service 'IPeerServiceServiceSoapBinding' and return error code (or SOAP_OK)
	virtual int __ns1__getTaskProcessReport(ns1__getTaskProcessReport *ns1__getTaskProcessReport_, ns1__getTaskProcessReportResponse *ns1__getTaskProcessReportResponse_) { return soap ? soap_call___ns1__getTaskProcessReport(soap, endpoint, NULL, ns1__getTaskProcessReport_, ns1__getTaskProcessReportResponse_) : SOAP_EOM; };
	/// Invoke 'getPackList' of service 'IPeerServiceServiceSoapBinding' and return error code (or SOAP_OK)
	virtual int __ns1__getPackList(ns1__getPackList *ns1__getPackList_, ns1__getPackListResponse *ns1__getPackListResponse_) { return soap ? soap_call___ns1__getPackList(soap, endpoint, NULL, ns1__getPackList_, ns1__getPackListResponse_) : SOAP_EOM; };
	/// Invoke 'sendTaskProcess' of service 'IPeerServiceServiceSoapBinding' and return error code (or SOAP_OK)
	virtual int __ns1__sendTaskProcess(ns1__sendTaskProcess *ns1__sendTaskProcess_, ns1__sendTaskProcessResponse *ns1__sendTaskProcessResponse_) { return soap ? soap_call___ns1__sendTaskProcess(soap, endpoint, NULL, ns1__sendTaskProcess_, ns1__sendTaskProcessResponse_) : SOAP_EOM; };
	/// Invoke 'getExceptionReport' of service 'IPeerServiceServiceSoapBinding' and return error code (or SOAP_OK)
	virtual int __ns1__getExceptionReport(ns1__getExceptionReport *ns1__getExceptionReport_, ns1__getExceptionReportResponse *ns1__getExceptionReportResponse_) { return soap ? soap_call___ns1__getExceptionReport(soap, endpoint, NULL, ns1__getExceptionReport_, ns1__getExceptionReportResponse_) : SOAP_EOM; };
};
#endif
